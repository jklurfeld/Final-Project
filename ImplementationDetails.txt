Incorporated parts I got wrong on a previous homework:
    - Homework 6 level 5: continuous visualization
    For Hw6 I didn't implement continuous visualization at all, and for this project I did

Why I used an ArrayList for BinSearchTree:


External Resources:
    - used to get a sense of how to use repaint: https://www2.seas.gwu.edu/~rhyspj/fall05cs143/lab8/lab88.html
    - this is the first resource that I looked at on how to implement an AVL Tree and I did look at and try to adapt the Java code given on how to insert a node, but I quickly realized
    that it didn't work and would need a lot of changes, so I had to do a lot of debugging and figuring out on my own and with help from Alexandra: https://www.geeksforgeeks.org/insertion-in-an-avl-tree/
    - used to explain what an AVL Tree was and looked at the pseudocode given on how to implement insertion and deletion but not the Java code: https://www.programiz.com/dsa/avl-tree

What I figured out on my own:
    - How to extend the BinSearchTree and BinTreeNode classes. I had to figure out how to work around the types being different for the types of nodes, because you can't override the types of class variables
    the same way you're able to for methods
    - when and where to use wrappers
    - For insertion:
        - I had to have different cases for if the root of the whole tree was unbalanced or any other node, because when rotating a normal node in the tree,
        I had to do it from the parent of that node so that no pointers were pointing to the wrong thing after the rotation process. This was something that I 
        didn't see in the resources listed above. Also as a result of looking at the unbalanced node from its parent, I had to add another parameter to my rotation
        functions to tell the function whether the rotation was supposed to happen in the left or right subtree.
    - For deletion:
        - I figured out how to do the implementation in Java of deletion because I only looked at the pseudocode/conceptual explanation of how to delete a node.
        The hardest part was figuring out how to delete a node that has two children, because I had to write the helper function findMin() and I had to figure out how to delete the node that I copied
        the data from.
    - I had to figure out a formula for what to set the x and y coordinates of each node to for the visualization

What I want to add if i had more time:
    - I was able to implement all of the things that I outlined in my proposal. A logical next step might be to animate the steps of the rotations, so you can really see what is
    happening.